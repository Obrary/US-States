%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 11.0.0
%%For: (Chris Chubb) (Chris Chubb Maps)
%%Title: (RI_44_00 [Converted].ai)
%%CreationDate: 6/19/2006 12:31 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 611.8877 792
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: ArialMT
%%+ Arial-BoldItalicMT
%%DocumentNeededFonts: ArialMT
%%+ Arial-BoldItalicMT
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 3 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: -1.7002 17.7802 612.2198 775.7002
%AI3_DocumentPreview: None
%AI5_ArtSize: 1296 1296
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 3
%AI8_OpenToView: -315.5 729.5 1 1178 682 26 0 1 33 114 0 0
%AI5_OpenViewLayers: 777
%%PageOrigin:0 0
%AI7_GridSettings: 0.01 8 0.01 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 100 128 8
%%BeginData: 9327 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDE0FFA8FFFFFFA8FFCFFFA8FFCFFFA8FFCFFFA8CF
%A8CFA7CFA7CEA7CFA7CEA7CEA7CEA7CEA7FD3AFFCACFC9CFC9CFC9CFC9CE
%A7CEC9CEA7CEC9CEA7CEC9CEA6CECECEC9CECECEA6CECDCEC8FD05CECDCF
%FD39FFA8CEA6CEA6CEA6CEA6CEA6CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7
%CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7FD39FFCFA6FD27CEA6CFFD39FFA8
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CEA7CEA7FD39FFCFC9FD27CEC8CFFD39FFA8CEA6CEA7
%CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6
%CEA7CEA6CEA7CEA7FD39FFCFFD28CECDCFFD39FFA8CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA7FD39FFCFFD28CECDCFFD39FFA8CEA7CEA6CEA7CEA6CEA7CEA6CEA7
%CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7FD39
%FFCFA6FD27CEA6CFFD39FFCACEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA7CEA7FD3AFFA6FD27
%CEC8CFFD39FFCFCEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA7FD3AFFC9FD27CECDCFFD39
%FFA8CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CEA6CEA6CEA7CFA7CFA7FD36FFC9FD29CEC8CECDCEFD
%35FFCACEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7FD36FFA7FD2BCEA7CEFD35
%FFCFC9A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CFFD35FFA7FD2DCECFFD35FF
%CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6
%CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6FD36FFC9FD2BCECDCFFD35FFA8CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6FD36FFC9FD2CCECFFD35FFCACEA6CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CEA7CEA6CECAFD36FFA7FD2BCEA6CFFD36FFCEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6FD36FFC9FD2DCEFD36FFCEA6CEA7CEA6CEA7CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CFFD35FFC9FD2DCEA7FD35FFCFA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA7CEA7FD34FFC9FD2FCEC9CFFD32FFCFA6CECDCECECECDCEA7CE
%A6CEA7CEA6CEA7CEA6CEA7CECDCEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CEA6C9A7FD30FFA7CECEA77DA7CEA7FD08CEA7FD06CEA7
%FD04CEA7FD09CEA7A7FD0CCEA7FD2FFFCFA6A77CCE52CE7CA7A6CE7DA7A6
%A77D7DA6A7A7CEA6A77CA77CA7A77DA6A7A7CE7CA7A7CE7C7D7DCEA6CEA6
%CEA6CEA6CEA6CEA7CEA6FD2EFFC9CE7D7D7DA7A7A77DA77DA77DA77DA77D
%A77D7DA7CEA7A77D7DFD04A77DA7A7A77DA77DA77DFD0FCEC9FD2DFFCFA6
%7DA77DA7A7A77D7D7DA77D7DA77DA77C7D7DCEA67DA7A77CA77DA77C7D7D
%A77DA7A77DA77DA7CEA6CEA7CEA6CEA6CEA6CEA7CEA6CEA8FD2CFFCACEA7
%CEA7A7A7CEA7CEA7A7A7CE7DA7CECEA7CECECEA7CEA7A7A7CEA7A77DCEA7
%CEA7CEA7A7A7FD05CEC9CFC9CEC8FD05CEA7CEFD2CFFCFA6CEA6CECDCEA6
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CECDCEA6CECDCEA6CEA6CEA6CECD
%CEA6CEA6CEA7FFFFFFA8CFA6CEA6CEA6CEA6CEFD2BFFCFFD29CEC8CFFD05
%FFCFC8FD05CEC8FD2BFFCFA6CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6
%CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA8FD06FFCEA6CE
%A7CEA6CFFD2BFFCAFD23CEA7FD06CECFFD06FFC9FD05CEFD2CFFCFA6CEA6
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6C9A6CEA6CEA6CECFFD05FFA8CEA6CEA6CEA7FD2CFFCAFD21CEC9FD05
%FFA7CEC9FD06FFFD07CEFD2CFFCFA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CECAFFA8FFFFCFA6CFFD06FFA6
%CEA6CEA6CEA7FFFFFFCAC9A7FD26FFCFFD21CEA7CEC9CEC9FFFFCFCFFFCA
%FD04FFCEA7CFC9CEA6CFFFFFFFCFCECEA6CEC9CFFD22FFCFA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6C9A8FFFFFFA6CEA6FFFFFFA6CFFFCEA6CEA8FFFFFFA6CEA7CEA6CEA6CF
%FD21FFCFFD25CEA7FD04FFCECECEFFFFFFCFFFFFC9CDCAFFFFFFCAFD07CE
%CAFD21FFCFA6CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7
%CEA6CEA7CEA6CEA7CEA6CEA7CECAFFFFFFA8CEA7FD05FFA6CFA8FFA7CFA7
%CEA6CEA7CEA6CEA6CFFD21FFCAFD25CEC9FD05FFA7CEC9FD04FFCFFFFFC8
%CEA6FD09CECAFD21FFCFA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CECFFD05FFA8CEA6CECBFFFFCF
%A6CEA6CEA6CEA7CEA6CEA6CEA6CFFD21FFCAFD26CEFD07FFCFCEA6CFFFFF
%A6CECECEC9FFC9FD05CECDCFFD22FFCFA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA8FD06FFCFA6
%CEA7FFFFCEA6CEA7FFFFCEA7CEA6CEA7CEA7FD22FFCAFD25CEA6CFFD06FF
%A7CECDCFFFFFC9CEA6CFFFFFA7FD07CEFD22FFCFA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA7FD
%05FFA8CEA6CECAFFA8CEA7CEA7FFFFCFA6CEA6CEA6CEA6CFFD21FFCFFD25
%CEA6CFFD05FFCFCDCEC9FFFFCFCECEC8CFFFFFCAFD07CEC9FD21FFCFA6CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CFCAFD08FFC9A6FFFFFFA6CEA7CEA7FFFFCFA6CEA7CEA6CEA7CECA
%FD20FFA7FD21CEC8CFFD06FFCAFD07FFC9FD05CECAFFCAFD07CEC9FD21FF
%CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA7FD05FFA7C8A7FD05FFA8CEA6CEA6CEA6CFFFCFA6CEA6CEA6
%CEA6CECFFD20FFC9FD23CEFD05FFCECECEFD05FFFD07CECFFFC9FD07CEC8
%FD21FFCEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CE
%A7CEA6CEA7CEA6CEA6CFFD04FFA6CEA7FD04FFCFA6CEA7CEA6CEA6FFCBCE
%A7CEA6CEA7CEA6CECAFD20FFC9FD23CEC9FFFFFFCFCEA7CEFD04FFC9FD05
%CEA7CEFFFFA7FD07CEA6CFFD1FFFA8CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA7FFFFCFA6CEA7FF
%FFFFA8CEA6CEA6CEA6CEA6FFFFCEA6CEA6CEA6CEA6CEA7FD20FFC9FD25CE
%CFFFC9CEC8CFFFFFFFCFFD08CEC9FFCFFD07CEC8CFFD1FFFCACEA7CEA6CE
%A7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CE
%A6CEA6CFFFCEA7CEA7FFFFCFA6CEA7CEA6CEA7CEA6CEFFFFA6CEA7CEA6CE
%A7CEA7FD20FFA7FD25CECFFFA7CECDCFFFFFC9FD09CEA7FFFFCFA6FD06CE
%CFFD1FFFCFC9A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6FFFFFFA7CEA7FFFFCFA6CEA6CEA6CEA6CE
%A6CFFFFFA7CEA6CEA6CEA6CEA7FD20FFA7FD25CEFFFFFFCFCDCFFFFFFFFD
%09CEFFFFFFFD07CECDCEFD1FFFCFCEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7
%CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA7FFFFC9A6CEA7FFA7
%CEA7CEA6CEA6CEA6CEA7FFFFFFA7CEA6CEA7CEA6CFFD21FFC9FD25CEFFCF
%C8CEA6CEFFFFA7CFCECEA7CFCFCFA7CEFD04FFC9CECECECDCFFD21FFA8CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6FFA7CEA6CEA8FFFFFFA7CEA6FD05FFA6FD04FFCFA6CEA6
%CFFD23FFC9FD23CEC9CFFFCFC8CFFFFFC9CEA7CECECEFD0AFFC9CEA6FD24
%FFA8CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6
%CEA7CEA6CEA7CEA6CEFFFFA7CDCAFFA6CEA6CEA6CEA7FD09FFCAC9A7CFFD
%24FFCFA6FD23CEA6FFFFCFA7FFFFCFA6CEC9CEA6CFFD0AFFCFFD26FFA8CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CE
%A6CEA6CEA6CEFFFFA8FD04FFCFA7CFFFFFCFFD31FFCFC9FD21CEC9CFFD3F
%FFA8CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7
%CEA6CEA7CEA6CFFD40FFCFFD22CECAFD3CFFA8CFA6C9A6CEA6CEA6CEA6CE
%A6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CFFD3C
%FFCECDFD25CECAFD3CFFA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CE
%A6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7FD3DFFCEA7FD23CEA6FD3E
%FFA8CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CFFD3FFFA7FD1BCEA6CECECEC8CECECEFD40FFCEA6CE
%A7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA7CEA6CEA6CEA6CEA7CFA7CFA8CF
%A7CEA7FD40FFC9FD13CECDCEA7CFC9CFFD49FFA8CEA6CEA6CEA6CEA6CEA6
%CEA6CEA6CEA6CEA6CEA6CFA8FFCBFD4CFFC9FD0FCEC9CFCFFD50FFCACEA7
%CEA6CEA7CEA6CEA7CEA6CEA6CEA7FD53FFCEA6CECECEA7CECDCEA6CECECE
%A7CFFD53FFA8CEA6CEA6CEA6C9A7CFA7CFA7CFCAFD55FFCECECEA6CEC9CF
%FD5DFFA6CEA7FFCBFD5FFFCFCFFDFCFFFDFCFFFDFCFFFDFCFFFD13FFCAFD
%62FFCACDA7FD61FFCFCECECAFD60FFA7CEA6CFFD5FFFCFCECECEFD60FFC9
%A6CEA8FD07FF52A8FD06FF52FD06FF7D52FD0DFFA8527D52275252A8FD32
%FFCECECEA6CFFD07FF7DA8FD05FFA8A8FD06FFA8A8FD0EFF7DA87D7D527D
%7DFD31FFCFA6CEA6CEA7FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FD46FFC9
%FD05CECAFD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD37FFCEA6CEA7CEA6CEA8FD09FFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD3AFFC9CEA7CECECEA6FD5EFF
%A7C9A7CFA8FDFCFFFDCAFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: ArialMT
%%IncludeFont: Arial-BoldItalicMT
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Euro 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _ArialMT ArialMT
[/_ArialMT/ArialMT 0 0 0 TZ%AI3_EndEncoding TrueType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Arial-BoldItalicMT Arial-BoldItalicMT
[/_Arial-BoldItalicMT/Arial-BoldItalicMT 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0.34 0.56 1 0 k
(C=34 M=56 Y=100 K=0) Pc
0 0 0.4 0.05 k
(C=0 M=0 Y=40 K=5) Pc
0 0 0 0.49 k
(C=0 M=0 Y=0 K=49) Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(State) Ln
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
6.7188 7.1201 m
6.7188 778.0786 l
605.1689 778.0786 l
605.1689 7.1201 l
6.7188 7.1201 l
h
W
n
*u
0 O
0 0 0.4 0.05 k
0 R
0.34 0.56 1 0 K
1 J 1 j 3.85 M134.3755 503.9707 m
133.6553 541.4146 l
133.4155 544.7749 l
133.4155 545.0146 l
132.6958 571.8975 l
132.6958 573.0977 l
132.2158 589.8994 l
131.9756 599.2603 l
131.9756 599.9805 l
131.7358 606.7012 l
131.7358 609.1016 l
131.4961 611.0215 l
131.4961 611.7417 l
131.2559 622.5425 l
130.5361 652.3057 l
130.0562 671.9878 l
129.8164 675.1084 l
129.8164 676.5483 l
129.8164 677.748 l
129.8164 692.3896 l
129.5762 698.3906 l
129.5762 712.0718 l
129.3364 718.7925 l
129.3364 737.5146 l
149.7324 738.9546 l
156.2114 739.1943 l
174.9277 739.6748 l
202.043 740.3945 l
203.4829 740.3945 l
213.561 740.6348 l
247.8745 741.835 l
255.3135 742.0752 l
257.4727 742.0752 l
260.5923 742.0752 l
265.8711 742.3149 l
274.7495 742.3149 l
276.6694 742.5547 l
280.5088 742.5547 l
291.0669 742.7949 l
295.3857 743.0352 l
296.3457 743.0352 l
298.0254 743.2749 l
299.9453 743.5151 l
305.9438 743.9951 l
311.9434 744.7153 l
312.6621 744.7153 l
313.3828 744.7153 l
314.3418 744.7153 l
316.7422 744.9551 l
318.6611 744.9551 l
319.8613 744.9551 l
321.0605 744.9551 l
323.4609 744.9551 l
339.0586 745.1953 l
361.1338 745.6753 l
386.0898 746.1553 l
386.0898 730.5537 l
386.0898 727.1934 l
386.0898 718.3125 l
386.0898 716.3921 l
386.0898 703.1909 l
386.0898 701.7505 l
386.0898 691.6699 l
386.0898 687.5894 l
386.0898 672.708 l
386.0898 667.1875 l
386.0898 666.9473 l
386.0898 661.6665 l
386.0898 660.9468 l
386.0898 660.4668 l
386.0898 659.9863 l
386.0898 650.8657 l
386.0898 642.7046 l
389.209 643.1846 l
390.8887 643.665 l
392.5684 643.9048 l
396.168 644.3848 l
396.6475 644.3848 l
397.8477 644.625 l
402.6465 645.3452 l
402.8857 645.3452 l
403.8457 645.585 l
406.4854 646.0654 l
407.4453 646.0654 l
408.165 646.3052 l
412.0039 646.7852 l
412.4844 647.0254 l
412.2441 643.4248 l
412.2441 642.9448 l
412.0039 640.0645 l
411.2852 633.1035 l
412.4844 628.3032 l
413.2041 626.1431 l
413.2041 625.9033 l
414.1641 622.3027 l
415.3643 617.5024 l
415.6045 617.2622 l
415.3643 616.542 l
415.124 616.3022 l
413.2041 610.5415 l
410.5645 603.1006 l
410.5645 602.8608 l
410.5645 602.6206 l
410.8047 601.9004 l
410.8047 601.4204 l
411.2852 600.9404 l
411.5244 600.7007 l
411.5244 600.4604 l
414.8838 595.1802 l
413.2041 593.5 l
412.0039 592.2998 l
409.8447 590.1396 l
409.8447 589.8994 l
408.8857 588.9395 l
407.4453 584.8589 l
412.4844 573.3379 l
412.4844 572.6177 l
412.2441 571.1777 l
412.2441 569.4976 l
411.2852 565.897 l
411.5244 564.457 l
412.2441 562.7769 l
414.4043 561.5767 l
415.6045 561.3364 l
416.8037 559.4165 l
417.7637 556.7759 l
418.0029 556.0562 l
418.4834 554.856 l
418.4834 551.4956 l
419.4434 549.8154 l
425.6816 546.2148 l
438.1602 539.2544 l
439.8398 538.2939 l
445.5986 534.9336 l
446.3184 534.6938 l
460.4756 526.5332 l
464.3145 520.7725 l
466.2344 517.8921 l
468.6348 514.292 l
470.3145 511.8916 l
476.0732 503.2505 l
482.5518 493.1694 l
483.2715 492.2095 l
481.3525 488.1289 l
473.1934 481.6484 l
473.4326 480.2085 l
474.3936 474.9277 l
475.3535 468.687 l
475.3535 468.4473 l
474.6328 464.6064 l
472.9531 456.4458 l
462.1553 436.5239 l
461.915 436.2837 l
457.1162 438.2041 l
455.4365 444.2046 l
455.916 446.3647 l
454.2363 449.7251 l
451.3574 455.9658 l
450.1572 458.606 l
448.958 460.7661 l
447.5186 460.7661 l
444.3984 460.7661 l
442.7188 452.3652 l
437.4395 441.8042 l
436 442.2842 l
434.5605 446.125 l
433.1201 460.7661 l
435.2803 468.4473 l
437.4395 468.207 l
441.0391 473.7275 l
441.2793 477.0879 l
441.5186 479.9683 l
441.7598 482.1284 l
442.2393 485.729 l
439.5996 489.3291 l
433.1201 498.9302 l
429.7607 501.3306 l
427.6016 503.0107 l
421.8428 504.2109 l
410.3242 506.8511 l
405.7656 506.3711 l
403.8457 503.9707 l
403.6064 503.7305 l
396.168 492.9297 l
396.168 489.5693 l
396.168 487.6489 l
396.168 484.5288 l
396.168 482.1284 l
396.168 479.248 l
394.248 471.5674 l
391.6084 460.7661 l
388.7285 455.7256 l
386.0898 456.4458 l
381.29 460.2861 l
380.8105 467.2471 l
381.5303 469.4072 l
381.5303 469.647 l
380.8105 470.1274 l
380.3311 470.1274 l
374.3311 470.3672 l
363.7734 470.3672 l
356.8145 471.0874 l
349.376 472.0474 l
348.416 473.7275 l
349.1357 475.168 l
346.9766 475.8877 l
346.7363 475.8877 l
344.8164 473.2476 l
344.5771 473.0073 l
346.2568 462.2065 l
346.7363 458.8462 l
347.4561 454.5259 l
347.4561 454.0454 l
347.6963 454.0454 l
349.1357 454.2856 l
356.335 456.4458 l
359.2148 459.3262 l
369.293 452.6055 l
369.7725 445.6445 l
370.4922 429.3232 l
371.2119 419.4819 l
372.6523 392.1191 l
355.6143 387.3184 l
345.5361 384.6787 l
346.2568 382.0381 l
347.4561 377.4785 l
348.6563 371.957 l
351.0557 368.1172 l
358.0146 356.1152 l
361.6143 349.6348 l
364.2529 346.9941 l
364.9727 342.9141 l
365.9336 337.3936 l
365.9336 331.873 l
363.0537 321.792 l
361.8535 317.2314 l
362.334 312.1914 l
362.8135 306.9102 l
362.8135 305.9512 l
364.0137 303.5508 l
364.2529 300.1895 l
363.7734 295.8691 l
363.0537 294.9092 l
362.0938 293.71 l
360.8936 295.8691 l
356.0947 294.1895 l
356.0947 290.1094 l
357.7744 285.0684 l
357.5352 280.748 l
354.415 273.0674 l
351.7754 269.9473 l
350.0957 270.1875 l
349.6162 270.1875 l
344.8164 267.7861 l
341.2168 263.7061 l
340.498 263.2266 l
340.498 262.2656 l
340.7383 257.9453 l
340.7383 251.7051 l
340.9775 242.8242 l
340.9775 242.584 l
340.498 241.8643 l
339.2979 239.9434 l
338.0977 238.5039 l
331.8594 229.1426 l
328.7393 224.582 l
328.7393 224.3428 l
323.4609 212.5811 l
322.0215 212.8213 l
304.9844 215.2207 l
298.9854 216.1816 l
296.5859 216.6611 l
292.5063 215.9414 l
292.2666 215.9414 l
284.5879 214.7412 l
278.8291 214.0215 l
267.791 211.3809 l
256.2729 208.5 l
251.2339 207.3008 l
235.877 203.7002 l
235.1567 203.46 l
228.438 201.0605 l
226.7583 200.3398 l
196.2842 189.0586 l
189.5654 184.9775 l
187.8857 184.2578 l
176.1279 179.6982 l
170.8486 179.2178 l
149.4927 177.2979 l
143.2539 176.8174 l
135.5752 175.1367 l
119.0181 170.3369 l
114.939 169.377 l
105.8208 166.7363 l
91.1831 159.2949 l
87.8237 162.1758 l
88.3037 167.6963 l
89.2637 170.8164 l
89.7437 172.4971 l
96.9424 178.2568 l
97.4224 178.7383 l
102.2212 182.5781 l
106.7803 187.8584 l
106.7803 188.0986 l
107.5005 190.7393 l
107.5005 196.499 l
107.5005 200.0996 l
107.2603 205.8604 l
107.2603 206.5811 l
107.2603 207.7813 l
107.2603 208.7402 l
107.2603 209.2207 l
107.2603 211.3809 l
107.2603 212.3408 l
106.7803 216.9014 l
106.7803 217.8613 l
106.5405 219.3018 l
106.5405 220.2617 l
106.5405 220.9814 l
106.3003 222.6621 l
106.3003 222.9023 l
106.3003 223.6221 l
106.0605 223.8623 l
103.1812 228.4229 l
103.1812 228.6621 l
101.5015 231.543 l
101.2612 231.7832 l
101.0215 232.0225 l
100.7817 232.5029 l
100.7817 232.7432 l
100.7817 232.9824 l
100.0615 241.1436 l
100.0615 241.624 l
100.3018 242.8242 l
100.5415 243.3047 l
100.5415 244.5039 l
100.7817 244.7441 l
102.4614 246.4238 l
113.499 251.4648 l
115.6587 252.4258 l
119.978 251.7051 l
128.6162 250.0244 l
128.6162 252.4258 l
128.6162 253.8652 l
128.8564 257.9453 l
129.0962 266.5859 l
129.3364 271.3867 l
129.8164 284.8281 l
130.0562 288.9082 l
131.0161 317.9521 l
131.2559 323.2324 l
131.9756 340.9941 l
132.4556 356.1152 l
133.4155 377.958 l
134.1353 398.6001 l
135.335 434.1235 l
135.8149 447.3247 l
134.8555 482.3687 l
134.3755 503.9707 l
b
501.2686 463.1665 m
501.9883 462.9268 l
502.9482 462.6865 l
504.1475 462.4463 l
508.2275 461.4863 l
510.1465 461.0063 l
513.5059 460.0464 l
513.5059 457.646 l
513.5059 457.4058 l
521.9043 455.2456 l
526.9434 454.0454 l
531.9824 453.0854 l
538.7012 451.1655 l
538.9414 451.1655 l
540.1406 450.9253 l
540.1406 449.7251 l
539.1816 435.3237 l
538.4609 424.7627 l
535.582 420.9224 l
535.3418 419.2422 l
534.8623 414.4414 l
535.3418 407.481 l
535.582 405.5605 l
536.7813 404.3604 l
537.0215 403.8804 l
537.502 403.4004 l
541.1016 396.1997 l
541.3408 394.999 l
543.7402 370.9971 l
544.2207 364.7559 l
547.0996 337.1533 l
548.2998 316.752 l
539.6611 314.3516 l
538.2217 313.8711 l
535.582 310.5107 l
536.0625 307.1504 l
519.5049 295.1494 l
517.8252 289.1484 l
503.4277 284.1084 l
502.2285 285.0684 l
501.2686 286.748 l
501.2686 289.6289 l
505.3477 300.9102 l
505.3477 305.71 l
499.5879 311.9512 l
499.3486 315.0713 l
498.6289 315.5518 l
495.0293 317.9521 l
498.6289 330.6729 l
490.71 355.875 l
490.4697 356.3555 l
493.5898 377.2383 l
493.8301 390.4395 l
493.8301 395.2393 l
494.0693 401.7202 l
490.9502 409.4009 l
491.1895 416.1216 l
491.1895 417.562 l
491.4297 420.2021 l
488.79 422.1226 l
488.3105 421.8823 l
486.6309 421.4023 l
480.8721 419.4819 l
475.3535 417.562 l
474.6328 417.3218 l
473.6729 416.8418 l
473.4326 413.4814 l
473.1934 411.0811 l
471.7529 390.6797 l
472.2334 390.1992 l
473.4326 387.5586 l
476.5527 380.3574 l
476.5527 376.2773 l
476.3135 361.876 l
476.3135 348.1943 l
477.5127 345.5547 l
481.5918 341.9541 l
480.8721 336.4336 l
478.4727 330.9131 l
477.9922 329.2324 l
474.1533 319.8721 l
473.9131 319.1523 l
473.9131 318.9121 l
474.6328 313.3906 l
475.1133 307.8711 l
476.0732 307.6309 l
476.0732 307.3906 l
476.3135 305.71 l
476.3135 304.9902 l
476.0732 304.0303 l
473.9131 298.0293 l
470.5537 295.6289 l
470.3145 295.6289 l
470.5537 301.8701 l
470.5537 303.3105 l
466.4746 306.9102 l
459.0361 309.5508 l
457.5957 309.3105 l
457.3564 309.3105 l
457.1162 309.3105 l
447.998 308.5908 l
446.5576 308.5908 l
446.0781 308.5908 l
441.7598 306.4307 l
440.0801 305.71 l
439.8398 304.5107 l
439.1191 300.9102 l
438.6396 298.5098 l
436.96 291.3086 l
434.5605 280.9883 l
430.2412 277.8682 l
429.2813 278.3477 l
429.2813 280.9883 l
424.9619 281.708 l
424.002 281.9482 l
413.9238 276.4277 l
405.5254 277.8682 l
401.4463 282.4277 l
398.8066 285.0684 l
398.3271 285.7891 l
399.0469 289.3887 l
399.2871 289.6289 l
403.126 291.7891 l
406.7256 293.9492 l
407.9258 294.6689 l
412.2441 293.9492 l
414.1641 293.71 l
414.8838 293.4688 l
425.2021 299.2305 l
425.4414 299.2305 l
426.8818 299.9492 l
426.6416 304.0303 l
426.6416 305.71 l
426.4023 309.3105 l
426.1621 309.791 l
424.9619 314.1113 l
423.5225 318.6719 l
422.8027 321.0723 l
419.9229 322.0322 l
418.0029 324.9121 l
418.0029 333.0732 l
418.0029 333.5527 l
424.7227 341.9541 l
429.041 346.9941 l
430.4814 357.3154 l
432.6406 362.3564 l
433.8398 365.9561 l
434.3203 366.917 l
434.8008 367.877 l
436 370.2773 l
436.2402 370.2773 l
440.5586 377.4785 l
444.1582 378.918 l
446.0781 382.0381 l
449.6777 393.7988 l
450.1572 395.4795 l
452.0771 401.9604 l
453.2773 406.7607 l
453.5176 407.481 l
453.5176 408.4409 l
453.9971 413.4814 l
452.3174 417.082 l
454.2363 420.9224 l
454.9561 421.6421 l
459.7559 426.2026 l
460.2354 426.4429 l
460.7158 426.9229 l
464.3145 430.5234 l
467.1943 432.9233 l
470.7939 433.4033 l
490.2305 435.5635 l
491.1895 435.8037 l
493.3496 441.5645 l
496.9492 451.1655 l
497.4287 452.6055 l
501.2686 463.1665 l
b
392.5684 379.1582 m
393.5273 379.3975 l
397.6074 376.998 l
400.0068 364.9961 l
398.3271 330.4336 l
397.8477 320.1113 l
398.5664 314.3516 l
399.2871 309.3105 l
399.7666 304.5107 l
387.0488 297.5498 l
385.3691 289.3887 l
381.7695 286.0283 l
381.29 281.4688 l
375.5313 275.9473 l
374.8115 286.2686 l
377.6904 311.9512 l
383.4492 312.6719 l
384.6494 315.0713 l
388.249 322.5117 l
387.7686 322.9922 l
380.8105 330.4336 l
380.0898 338.5938 l
381.7695 348.915 l
384.6494 365.2363 l
388.0088 374.3574 l
391.3682 378.918 l
392.5684 379.1582 l
b
403.6064 452.8457 m
406.9648 453.5654 l
412.9648 449.4854 l
414.4043 440.3643 l
413.9238 438.9238 l
410.5645 437.9639 l
409.8447 433.8838 l
418.0029 428.123 l
427.6016 425.9629 l
433.3604 419.4819 l
434.8008 406.521 l
432.4004 399.3198 l
426.1621 387.0781 l
420.8828 383.2383 l
417.7637 384.6787 l
414.6436 389.2393 l
413.9238 396.6797 l
416.084 405.8008 l
418.7227 408.4409 l
420.4023 414.2017 l
420.8828 420.6821 l
416.3232 425.2427 l
408.165 427.4028 l
401.4463 437.7241 l
398.0869 443.2446 l
395.9277 451.1655 l
403.6064 452.8457 l
b
420.6436 311.2314 m
421.3633 308.3506 l
419.9229 304.5107 l
410.5645 314.8311 l
411.7646 317.2314 l
420.6436 311.2314 l
b
448.2383 440.8442 m
450.3975 440.124 l
452.7969 432.4434 l
446.7979 432.2036 l
445.1191 436.2837 l
447.2783 437.7241 l
448.2383 440.8442 l
b
277.3892 48.8848 m
281.9482 43.6035 l
285.5479 42.1641 l
285.7876 39.2832 l
283.8682 32.8027 l
280.7485 31.3633 l
254.8335 26.8018 l
250.9941 27.2822 l
243.5552 32.5625 l
242.8354 38.3232 l
247.3945 56.3252 l
254.1133 61.6055 l
257.4727 68.3262 l
257.7129 68.5664 l
263.2319 75.0469 l
265.1514 83.208 l
265.3916 91.1289 l
267.311 94.4893 l
275.2295 91.1289 l
279.0688 84.8887 l
279.5488 81.7676 l
277.3892 74.8066 l
273.3101 67.3662 l
272.3501 58.2451 l
275.2295 51.5244 l
277.3892 48.8848 l
b
*U
Q
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Text) Ln
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
6.7188 7.1201 m
6.7188 778.0786 l
605.1689 778.0786 l
605.1689 7.1201 l
6.7188 7.1201 l
h
W
n
u
u
0 To
1 0 0 1 141.814 503.7881 0 Tp
0 Tv
TP
0 Tr
0 O
0 0 0 0.4902 k
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\122) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 167.6167 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\150) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 189.7305 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\157) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 212.1108 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\144) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 234.4897 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\145) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 254.7944 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\040) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 266.146 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\111) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 277.2339 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\163) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 297.8022 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\154) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 308.8906 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\141) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 329.1953 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\156) Tx 1 0 Tk
TO
U

u
0 To
1 0 0 1 351.5742 503.7881 0 Tp
0 Tv
TP
0 Tr
/_Arial-BoldItalicMT 33.1234 28.4194 -12.4698 Tf
99.9713 100 Tz
0 Tt
0 TV
0 Tc
(\144) Tx 1 0 Tk
TO
U

U

Q
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Scale) Ln
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
611.8877 792 m
611.8877 0 l
0 0 l
0 792 l
611.8877 792 l
h
W
n
0 R
0 0 0 1 K
1 J 1 j 0.9598 w 3.85 M325.8604 45.0439 m
325.8604 53.2051 l
S
421.3633 45.0439 m
421.3633 53.2051 l
S
516.8652 45.0439 m
516.8652 53.2051 l
S
349.8564 45.0439 m
349.8564 50.8047 l
S
373.6113 45.0439 m
373.6113 50.8047 l
S
397.6074 45.0439 m
397.6074 50.8047 l
S
445.3584 45.0439 m
445.3584 50.8047 l
S
469.1143 45.0439 m
469.1143 50.8047 l
S
493.1104 45.0439 m
493.1104 50.8047 l
S
325.8604 45.0439 m
516.8652 45.0439 l
S
u
0 To
1 0 0 1 322.6572 58.9648 0 Tp
0 Tv
TP
0 Tr
0 O
0 0 0 1 k
0 J 0 j 1 w 4 M/_ArialMT 11.5212 9.885 -3.741 Tf
99.9714 100 Tz
0 Tt
0 TV
0 Tc
(0) Tx 1 0 Tk
TO
U


u
0 To
1 0 0 1 418.1602 58.9648 0 Tp
0 Tv
TP
0 Tr
/_ArialMT 11.5212 9.885 -3.741 Tf
99.9714 100 Tz
0 Tt
0 TV
0 Tc
(\070) Tx 1 0 Tk
TO
U


u
0 To
1 0 0 1 510.459 58.9648 0 Tp
0 Tv
TP
0 Tr
/_ArialMT 11.5212 9.885 -3.741 Tf
99.9714 100 Tz
0 Tt
0 TV
0 Tc
(16) Tx 1 0 Tk
TO
U


u
0 To
1 0 0 1 370.4082 58.9648 0 Tp
0 Tv
TP
0 Tr
/_ArialMT 11.5212 9.885 -3.741 Tf
99.9714 100 Tz
0 Tt
0 TV
0 Tc
(4) Tx 1 0 Tk
TO
U


u
0 To
1 0 0 1 526.9434 58.9648 0 Tp
0 Tv
TP
0 Tr
/_ArialMT 11.5212 9.885 -3.741 Tf
99.9714 100 Tz
0 Tt
0 TV
0 Tc
(\115\151\154\145\163) Tx 1 0 Tk
TO
U


Q
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
